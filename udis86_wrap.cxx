/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#include <v8.h>
#include <errno.h>
#include <limits.h>
#include <iostream>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIG_Error(code, msg)     SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_exception(code, msg) SWIGV8_ErrorHandler.error(code, msg)
#define SWIG_fail                 goto fail
#define SWIGV8_OVERLOAD false

void SWIG_V8_Raise(const char* msg) {
  v8::ThrowException(v8::Exception::Error(v8::String::New(msg)));
}

/* 
  Note: There are two contexts for handling errors.
  A static V8ErrorHandler is used in not overloaded methods.
  For overloaded methods the throwing type checking mechanism is used
  during dispatching. As V8 exceptions can not be resetted properly
  the trick is to use a dynamic ErrorHandler with same local name as the global
  one.
  
  - See defintion of SWIG_Error above.
  - See code templates 'JS_function_dispatcher', 'JS_functionwrapper_overload', 
    and 'JS_function_dispatch_case' in javascriptcode.swg

*/
class V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    SWIG_V8_Raise(msg);
  }
};
// this is used in usually
V8ErrorHandler SWIGV8_ErrorHandler;

// instances of this are used in overloaded functions
class OverloadErrorHandler: public V8ErrorHandler {
public:
  virtual void error(int code, const char* msg) {
    err = v8::Exception::Error(v8::String::New(msg));
    if(code != SWIG_TypeError) {
      v8::ThrowException(err);
    }
  }
  v8::Handle<v8::Value> err;
};



// Note: to trigger the c8 gc more often one can tell v8 about the memory consumption
// TODO: we could add a v8 specific parameter to control this value
#define SWIGV8_AVG_OBJ_SIZE 1000

class SWIGV8_Proxy {
public:
  SWIGV8_Proxy(): swigCMemOwn(false), swigCObject(0), info(0) {
    v8::V8::AdjustAmountOfExternalAllocatedMemory(SWIGV8_AVG_OBJ_SIZE);
  };
  
  ~SWIGV8_Proxy() { 
    v8::V8::AdjustAmountOfExternalAllocatedMemory(-SWIGV8_AVG_OBJ_SIZE);
  }
  
  bool swigCMemOwn;
  void *swigCObject;
  swig_type_info *info;
};

class SWIGV8_ClientData {
public:
  v8::Handle<v8::FunctionTemplate> class_templ;
  void (*dtor) (v8::Persistent< v8::Value > object, void *parameter);
};

v8::Persistent<v8::FunctionTemplate> SWIGV8_SWIGTYPE_Proxy_class_templ;

int SWIG_V8_ConvertInstancePtr(v8::Handle<v8::Object> objRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  
  if(objRef->InternalFieldCount() < 1) return SWIG_ERROR;
  v8::Handle<v8::Value> cdataRef = objRef->GetInternalField(0);
  SWIGV8_Proxy *cdata = (SWIGV8_Proxy *) v8::External::Unwrap(cdataRef);
  if(cdata == NULL) {
    return SWIG_ERROR;
  }
  if(cdata->info != info) {
    bool type_valid = false;
    swig_cast_info *t = info->cast; 
    while(t != NULL) {
      if(t->type == cdata->info) {
        type_valid = true;
        break;
      }
      t = t->next;
    }
    if(!type_valid) {
      return SWIG_TypeError;
    }
  }
  *ptr = cdata->swigCObject;
  if(flags & SWIG_POINTER_DISOWN) {
    cdata->swigCMemOwn = false;
  }
  return SWIG_OK;
}

void SWIGV8_Proxy_DefaultDtor(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy) {
    delete proxy;
  }
}

void SWIGV8_SetPrivateData(v8::Handle<v8::Object> obj, void* ptr, swig_type_info *info, int flags) {
  SWIGV8_Proxy* cdata = new SWIGV8_Proxy();
  cdata->swigCObject = ptr;  
  cdata->swigCMemOwn = (flags & SWIG_POINTER_OWN) ? 1 : 0;
  cdata->info = info;
  obj->SetPointerInInternalField(0, cdata);
  
  v8::Persistent<v8::Object> weakptr = v8::Persistent<v8::Object>::New(obj);
  // clientdata must be set for owned data as we need to register the dtor  
  if(cdata->swigCMemOwn) {
    weakptr.MakeWeak(cdata, ((SWIGV8_ClientData*)info->clientdata)->dtor);
  } else {
    weakptr.MakeWeak(cdata, SWIGV8_Proxy_DefaultDtor);
  }
}

int SWIG_V8_ConvertPtr(v8::Handle<v8::Value> valRef, void** ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;

  if(!valRef->IsObject()) {
    return SWIG_TypeError;
  }
  v8::Handle<v8::Object> objRef = valRef->ToObject();
  return SWIG_V8_ConvertInstancePtr(objRef, ptr, info, flags);
}

v8::Handle<v8::Object> SWIG_V8_NewPointerObj(void *ptr, swig_type_info *info, int flags) {
  v8::HandleScope scope;
  
  v8::Handle<v8::FunctionTemplate> class_templ;
  if(info->clientdata != 0) {
    class_templ = ((SWIGV8_ClientData*) info->clientdata)->class_templ;
  } else {
    class_templ = SWIGV8_SWIGTYPE_Proxy_class_templ;
  }
  v8::Handle<v8::Object> result = class_templ->InstanceTemplate()->NewInstance();
  SWIGV8_SetPrivateData(result, ptr, info, flags);
  
  return scope.Close(result);
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)    SWIG_V8_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)      SWIG_V8_NewPointerObj(ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_V8_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_V8_NewPointerObj(thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_V8_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_V8_NewPointerObj(ptr, type, 0)




/**
 * Creates a class template for a class with specified initialization function. 
 */
v8::Persistent<v8::FunctionTemplate> SWIGV8_CreateClassTemplate(const char* symbol) {
    v8::Local<v8::FunctionTemplate> class_templ = v8::FunctionTemplate::New();
    class_templ->SetClassName(v8::String::NewSymbol(symbol));

    v8::Handle<v8::ObjectTemplate> inst_templ = class_templ->InstanceTemplate();
    inst_templ->SetInternalFieldCount(1);

    return v8::Persistent<v8::FunctionTemplate>::New(class_templ);
}

/**
 * Registers a class method with given name for a given class template. 
 */
void SWIGV8_AddMemberFunction(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::InvocationCallback _func) {
    v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->PrototypeTemplate();
    proto_templ->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func));    
}

/**
 * Registers a class property with given name for a given class template. 
 */
void SWIGV8_AddMemberVariable(v8::Handle<v8::FunctionTemplate> class_templ, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  v8::Handle<v8::ObjectTemplate> proto_templ = class_templ->InstanceTemplate();
  proto_templ->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticFunction(v8::Handle<v8::Object> obj, const char* symbol, v8::InvocationCallback _func) {
  obj->Set(v8::String::NewSymbol(symbol), v8::FunctionTemplate::New(_func)->GetFunction());
}

/**
 * Registers a class method with given name for a given object. 
 */
void SWIGV8_AddStaticVariable(v8::Handle<v8::Object> obj, const char* symbol, v8::AccessorGetter getter, v8::AccessorSetter setter) {
  obj->SetAccessor(v8::String::NewSymbol(symbol), getter, setter);
}

void JS_veto_set_variable(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info)
{
    char buffer[256];
    char msg[512];
    int res;
    
    property->WriteUtf8(buffer, 256);
    res = sprintf(msg, "Tried to write read-only variable: %s.", buffer);
    
    if(res<0) {
      SWIG_exception(SWIG_ERROR, "Tried to write read-only variable.");
    } else {
      SWIG_exception(SWIG_ERROR, msg);
    }
}



#ifndef BUILDING_NODE_EXTENSION
#define BUILDING_NODE_EXTENSION
#endif

#include <node.h>
#include <node_buffer.h>


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_FILE swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_f_p_ud__int swig_types[2]
#define SWIGTYPE_p_f_p_ud__void swig_types[3]
#define SWIGTYPE_p_imaxdiv_t swig_types[4]
#define SWIGTYPE_p_int swig_types[5]
#define SWIGTYPE_p_long_long swig_types[6]
#define SWIGTYPE_p_map_entry swig_types[7]
#define SWIGTYPE_p_p_char swig_types[8]
#define SWIGTYPE_p_short swig_types[9]
#define SWIGTYPE_p_signed_char swig_types[10]
#define SWIGTYPE_p_ud swig_types[11]
#define SWIGTYPE_p_ud_itab_entry swig_types[12]
#define SWIGTYPE_p_ud_lookup_table_list_entry swig_types[13]
#define SWIGTYPE_p_ud_mnemonic_code swig_types[14]
#define SWIGTYPE_p_ud_operand swig_types[15]
#define SWIGTYPE_p_ud_type swig_types[16]
#define SWIGTYPE_p_unsigned_char swig_types[17]
#define SWIGTYPE_p_unsigned_int swig_types[18]
#define SWIGTYPE_p_unsigned_long_long swig_types[19]
#define SWIGTYPE_p_unsigned_short swig_types[20]
#define SWIGTYPE_p_void swig_types[21]
static swig_type_info *swig_types[23];
static swig_module_info swig_module = {swig_types, 22, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#define SWIGVERSION 0x020006 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) (void *)((const void *)(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),(void**)(a)) 


#include <stdexcept>



#include <inttypes.h>
#include <stdlib.h>
#include "/usr/local/include/libudis86/types.h"
#include "/usr/local/include/libudis86/itab.h"
#include "/usr/local/include/libudis86/extern.h"



#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


SWIGINTERN 
int SWIG_AsVal_double (v8::Handle<v8::Value> obj, double *val)
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  if(val) *val = obj->NumberValue();
  
  return SWIG_OK;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN 
int SWIG_AsVal_long_SS_long (v8::Handle<v8::Value> obj, long long* val)
{

  // Convert V8 32 bit number
  if (obj->IsNumber()) {
    if(val) *val = (long long) obj->IntegerValue();

    return SWIG_OK;
  }

  








  return SWIG_TypeError;

}









  SWIGINTERNINLINE
  v8::Handle<v8::Number> SWIG_From_long_SS_long  ( long long value)
  {
      // I know this is inadequate
      return v8::Number::New(( long) value);
  }



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(v8::Handle<v8::Value> valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef->IsString()) {
    v8::Handle<v8::String> js_str = valRef->ToString();

    size_t len = js_str->Utf8Length() + 1;
    char* cstr = new char[len];
    js_str->WriteUtf8(cstr, len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef->IsObject()) {
      v8::Handle<v8::Object> obj = valRef->ToObject();
      // try if the object is a wrapped char[]
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
      return SWIG_TypeError;
    } else {
      return SWIG_TypeError;
    }
  }
}





SWIGINTERN 
int SWIG_AsVal_int (v8::Handle<v8::Value> valRef, int* val)
{
  if (!valRef->IsInt32()) {
    return SWIG_TypeError;
  }
  if(val) *val = valRef->IntegerValue();
  
  return SWIG_OK;
}









  SWIGINTERNINLINE
  v8::Handle<v8::Number> SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
  {
      // I know this is inadequate
      return v8::Number::New((unsigned long) value);
  }




SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      // TODO: handle extra long strings
      return v8::Undefined();
    } else {
      v8::Handle<v8::String> js_str = v8::String::New(carray, size);
      return js_str;
    }
  } else {
    return v8::Undefined();
  }
}


SWIGINTERNINLINE v8::Handle<v8::Value> 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_int  (int value)
{
  return v8::Int32::New(value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN 
int SWIG_AsVal_unsigned_SS_long (v8::Handle<v8::Value> obj, unsigned long *val) 
{
  if(!obj->IsNumber()) {
    return SWIG_TypeError;
  }
  
  long longVal = (long) obj->NumberValue();
  
  if(longVal < 0) {
      return SWIG_OverflowError;
  }
  
  if(val) *val = longVal; 
  
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (v8::Handle<v8::Value> obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned char)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE
v8::Handle<v8::Value> SWIG_From_long  (long value)
{
  return v8::Number::New(value);
}


SWIGINTERNINLINE 
v8::Handle<v8::Value> SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    v8::Integer::NewFromUnsigned(value) : v8::Integer::New((long)(value)); 
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_char  (unsigned char value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN 
int SWIG_AsVal_unsigned_SS_long_SS_long (v8::Handle<v8::Value> obj, unsigned long long* val)
{

  // Convert V8 32 bit number
  if (obj->IsNumber()) {
    if(val) *val = (unsigned long long) obj->IntegerValue();

    return SWIG_OK;
  }

  








  return SWIG_TypeError;

}


SWIGINTERN int
SWIG_AsCharArray(v8::Handle<v8::Value> obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (v8::Handle<v8::Value> obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = (unsigned int)(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE v8::Handle<v8::Value>
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (v8::Handle<v8::Value> obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = (size_t)(v);
  return res;
}


SWIGV8_ClientData _imaxdiv_t_clientData;
SWIGV8_ClientData _ud_operand_clientData;
SWIGV8_ClientData _ud_clientData;


void _wrap_imaxdiv_t_quot_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_quot_set" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = (imaxdiv_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv_t_quot_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = (long long)(val2);
  if (arg1) (arg1)->quot = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_imaxdiv_t_quot_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_quot_get" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = (imaxdiv_t *)(argp1);
  result = (long long) ((arg1)->quot);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_imaxdiv_t_rem_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_rem_set" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = (imaxdiv_t *)(argp1);
  ecode2 = SWIG_AsVal_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv_t_rem_set" "', argument " "2"" of type '" "long long""'");
  } 
  arg2 = (long long)(val2);
  if (arg1) (arg1)->rem = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_imaxdiv_t_rem_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long long result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_imaxdiv_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "imaxdiv_t_rem_get" "', argument " "1"" of type '" "imaxdiv_t *""'"); 
  }
  arg1 = (imaxdiv_t *)(argp1);
  result = (long long) ((arg1)->rem);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_imaxdiv_t(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  imaxdiv_t *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_imaxdiv_t.");  
  result = (imaxdiv_t *)new imaxdiv_t();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_imaxdiv_t, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_delete_imaxdiv_t(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
    std::cout << "Deleting wrapped instance: " << proxy->info->name << std::endl;
    delete (imaxdiv_t *) proxy->swigCObject;
  }
  delete proxy;
}


v8::Handle<v8::Value> _wrap_imaxabs(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  intmax_t arg1 ;
  long long val1 ;
  int ecode1 = 0 ;
  intmax_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_imaxabs.");  
  
  ecode1 = SWIG_AsVal_long_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "imaxabs" "', argument " "1"" of type '" "intmax_t""'");
  } 
  arg1 = (intmax_t)(val1);
  result = (intmax_t)imaxabs(arg1);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_imaxdiv(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  intmax_t arg1 ;
  intmax_t arg2 ;
  long long val1 ;
  int ecode1 = 0 ;
  long long val2 ;
  int ecode2 = 0 ;
  imaxdiv_t result;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_imaxdiv.");  
  
  ecode1 = SWIG_AsVal_long_SS_long(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "imaxdiv" "', argument " "1"" of type '" "intmax_t""'");
  } 
  arg1 = (intmax_t)(val1);
  ecode2 = SWIG_AsVal_long_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "imaxdiv" "', argument " "2"" of type '" "intmax_t""'");
  } 
  arg2 = (intmax_t)(val2);
  result = imaxdiv(arg1,arg2);
  jsresult = SWIG_NewPointerObj((new imaxdiv_t((const imaxdiv_t&)(result))), SWIGTYPE_p_imaxdiv_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_strtoimax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  intmax_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_strtoimax.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strtoimax" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "strtoimax" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "strtoimax" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (intmax_t)strtoimax((char const *)arg1,arg2,arg3);
  jsresult = SWIG_From_long_SS_long((long long)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_strtoumax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  uintmax_t result;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_strtoumax.");  
  
  res1 = SWIG_AsCharPtrAndSize(args[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "strtoumax" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = (char *)(buf1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_p_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "strtoumax" "', argument " "2"" of type '" "char **""'"); 
  }
  arg2 = (char **)(argp2);
  ecode3 = SWIG_AsVal_int(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "strtoumax" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = (int)(val3);
  result = (uintmax_t)strtoumax((char const *)arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_FMT64(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"%ll");
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_NONE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_NONE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_AL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_AL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_BL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_BL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_AH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_AH));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CH));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DH));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_BH(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_BH));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_SPL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_SPL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_BPL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_BPL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_SIL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_SIL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DIL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DIL));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R8B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R8B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R9B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R9B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R10B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R10B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R11B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R11B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R12B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R12B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R13B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R13B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R14B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R14B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R15B(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R15B));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_AX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_AX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_BX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_BX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_SP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_SP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_BP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_BP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_SI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_SI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R8W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R8W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R9W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R9W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R10W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R10W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R11W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R11W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R12W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R12W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R13W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R13W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R14W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R14W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R15W(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R15W));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_EAX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_EAX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ECX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ECX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_EDX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_EDX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_EBX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_EBX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ESP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ESP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_EBP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_EBP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ESI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ESI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_EDI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_EDI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R8D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R8D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R9D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R9D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R10D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R10D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R11D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R11D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R12D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R12D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R13D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R13D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R14D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R14D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R15D(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R15D));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RAX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RAX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RCX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RCX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RDX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RDX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RBX(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RBX));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RSP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RSP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RBP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RBP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RSI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RSI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RDI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RDI));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R9));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R10(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R10));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R11(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R11));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R12(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R12));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R13(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R13));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R14(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R14));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_R15(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_R15));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ES(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ES));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_SS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_SS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_FS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_FS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_GS(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_GS));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR9));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR10(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR10));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR11(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR11));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR12(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR12));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR13(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR13));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR14(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR14));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_CR15(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_CR15));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR9));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR10(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR10));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR11(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR11));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR12(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR12));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR13(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR13));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR14(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR14));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_DR15(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_DR15));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_MM7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_MM7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_ST7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_ST7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM6(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM6));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM9));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM10(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM10));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM11(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM11));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM12(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM12));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM13(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM13));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM14(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM14));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_XMM15(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_XMM15));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_R_RIP(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_R_RIP));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_REG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_REG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_MEM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_MEM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_PTR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_PTR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_IMM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_IMM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_JIMM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_JIMM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_OP_CONST(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_OP_CONST));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_type_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  enum ud_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_type_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_type_set" "', argument " "2"" of type '" "enum ud_type""'");
  } 
  arg2 = (enum ud_type)(val2);
  if (arg1) (arg1)->type = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_type_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum ud_type result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_type_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (enum ud_type) ((arg1)->type);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_size_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_size_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_size_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->size = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_size_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_size_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (uint8_t) ((arg1)->size);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_base_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  enum ud_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_base_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_base_set" "', argument " "2"" of type '" "enum ud_type""'");
  } 
  arg2 = (enum ud_type)(val2);
  if (arg1) (arg1)->base = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_base_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum ud_type result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_base_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (enum ud_type) ((arg1)->base);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_index_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  enum ud_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_index_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_index_set" "', argument " "2"" of type '" "enum ud_type""'");
  } 
  arg2 = (enum ud_type)(val2);
  if (arg1) (arg1)->index = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_index_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum ud_type result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_index_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (enum ud_type) ((arg1)->index);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_offset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_offset_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_offset_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->offset = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_offset_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_offset_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (uint8_t) ((arg1)->offset);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_scale_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud_operand *arg1 = (ud_operand *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_scale_set" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_operand_scale_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->scale = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_scale_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud_operand *arg1 = (ud_operand *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_scale_get" "', argument " "1"" of type '" "ud_operand *""'"); 
  }
  arg1 = (ud_operand *)(argp1);
  result = (uint8_t) ((arg1)->scale);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ud_operand(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ud_operand *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ud_operand.");  
  result = (ud_operand *)new ud_operand();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ud_operand, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_delete_ud_operand(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
    std::cout << "Deleting wrapped instance: " << proxy->info->name << std::endl;
    delete (ud_operand *) proxy->swigCObject;
  }
  delete proxy;
}


void _wrap_ud_inp_hook_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  int (*arg2)(ud *) = (int (*)(ud *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_hook_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_ud__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ud_inp_hook_set" "', argument " "2"" of type '" "int (*)(ud *)""'"); 
    }
  }
  if (arg1) (arg1)->inp_hook = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_hook_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int (*result)(ud *) = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_hook_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (int (*)(ud *)) ((arg1)->inp_hook);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_ud__int);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_curr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_curr_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_inp_curr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->inp_curr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_curr_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_curr_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->inp_curr);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_fill_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_fill_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_inp_fill_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->inp_fill = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_fill_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_fill_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->inp_fill);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_file_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_file_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_FILE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_inp_file_set" "', argument " "2"" of type '" "FILE *""'"); 
  }
  arg2 = (FILE *)(argp2);
  if (arg1) (arg1)->inp_file = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_file_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  FILE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_file_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (FILE *) ((arg1)->inp_file);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FILE, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_ctr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_ctr_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_inp_ctr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->inp_ctr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_ctr_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_ctr_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->inp_ctr);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_buff_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_buff_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_inp_buff_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->inp_buff = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_buff_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_buff_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t *) ((arg1)->inp_buff);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_buff_end_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_buff_end_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_inp_buff_end_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  if (arg1) (arg1)->inp_buff_end = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_buff_end_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_buff_end_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t *) ((arg1)->inp_buff_end);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_end_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_end_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_inp_end_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->inp_end = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_end_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_end_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->inp_end);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_translator_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  void (*arg2)(ud *) = (void (*)(ud *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_translator_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_p_ud__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ud_translator_set" "', argument " "2"" of type '" "void (*)(ud *)""'"); 
    }
  }
  if (arg1) (arg1)->translator = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_translator_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void (*result)(ud *) = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_translator_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (void (*)(ud *)) ((arg1)->translator);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_p_ud__void);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_insn_offset_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_offset_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_insn_offset_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = (uint64_t)(val2);
  if (arg1) (arg1)->insn_offset = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_insn_offset_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_offset_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint64_t) ((arg1)->insn_offset);
  jsresult = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_insn_hexcode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_hexcode_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_insn_hexcode_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->insn_hexcode,arg2,32*sizeof(char));
  else memset(arg1->insn_hexcode,0,32*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_insn_hexcode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_hexcode_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (char *)(char *) ((arg1)->insn_hexcode);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_insn_buffer_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_buffer_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_insn_buffer_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = (char *)(temp2);
  if (arg2) memcpy(arg1->insn_buffer,arg2,64*sizeof(char));
  else memset(arg1->insn_buffer,0,64*sizeof(char));
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_insn_buffer_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_buffer_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (char *)(char *) ((arg1)->insn_buffer);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_insn_fill_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_fill_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_insn_fill_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  if (arg1) (arg1)->insn_fill = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_insn_fill_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_fill_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (unsigned int) ((arg1)->insn_fill);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_dis_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_dis_mode_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_dis_mode_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->dis_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_dis_mode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_dis_mode_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->dis_mode);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pc_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pc_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pc_set" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = (uint64_t)(val2);
  if (arg1) (arg1)->pc = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pc_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pc_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint64_t) ((arg1)->pc);
  jsresult = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_vendor_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_vendor_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_vendor_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->vendor = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_vendor_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_vendor_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->vendor);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_mapen_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  map_entry *arg2 = (map_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_mapen_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_map_entry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_mapen_set" "', argument " "2"" of type '" "map_entry *""'"); 
  }
  arg2 = (map_entry *)(argp2);
  if (arg1) (arg1)->mapen = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_mapen_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  map_entry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_mapen_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (map_entry *) ((arg1)->mapen);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_map_entry, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_mnemonic_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  enum ud_mnemonic_code arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_mnemonic_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_mnemonic_set" "', argument " "2"" of type '" "enum ud_mnemonic_code""'");
  } 
  arg2 = (enum ud_mnemonic_code)(val2);
  if (arg1) (arg1)->mnemonic = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_mnemonic_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enum ud_mnemonic_code result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_mnemonic_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (enum ud_mnemonic_code) ((arg1)->mnemonic);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_operand_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  ud_operand *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ud_operand, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_operand_set" "', argument " "2"" of type '" "ud_operand [3]""'"); 
  } 
  arg2 = (ud_operand *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) arg1->operand[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""operand""' of type '""ud_operand [3]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_operand_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ud_operand *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_operand_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (ud_operand *)(ud_operand *) ((arg1)->operand);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ud_operand, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_error_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_error_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_error_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->error = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_error_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_error_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->error);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_rex_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_rex_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_rex_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_rex = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_rex_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_rex_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_rex);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_seg_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_seg_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_seg_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_seg = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_seg_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_seg_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_seg);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_opr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_opr_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_opr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_opr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_opr_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_opr_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_opr);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_adr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_adr_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_adr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_adr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_adr_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_adr_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_adr);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_lock_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_lock_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_lock_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_lock = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_lock_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_lock_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_lock);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_rep_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_rep_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_rep_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_rep = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_rep_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_rep_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_rep);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_repe_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_repe_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_repe_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_repe = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_repe_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_repe_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_repe);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_repne_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_repne_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_repne_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_repne = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_repne_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_repne_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_repne);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_pfx_insn_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_insn_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_pfx_insn_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->pfx_insn = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_pfx_insn_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_pfx_insn_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->pfx_insn);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_default64_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_default64_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_default64_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->default64 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_default64_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_default64_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->default64);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_opr_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_opr_mode_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_opr_mode_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->opr_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_opr_mode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_opr_mode_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->opr_mode);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_adr_mode_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_adr_mode_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_adr_mode_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->adr_mode = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_adr_mode_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_adr_mode_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->adr_mode);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_br_far_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_br_far_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_br_far_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->br_far = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_br_far_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_br_far_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->br_far);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_br_near_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_br_near_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_br_near_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->br_near = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_br_near_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_br_near_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->br_near);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_implicit_addr_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_implicit_addr_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_implicit_addr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->implicit_addr = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_implicit_addr_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_implicit_addr_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->implicit_addr);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_c1_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c1_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_c1_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->c1 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_c1_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c1_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->c1);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_c2_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c2_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_c2_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->c2 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_c2_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c2_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->c2);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_c3_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c3_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_c3_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->c3 = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_c3_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_c3_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->c3);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_cache_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_cache_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_inp_cache_set" "', argument " "2"" of type '" "uint8_t [256]""'"); 
  } 
  arg2 = (uint8_t *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) arg1->inp_cache[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""inp_cache""' of type '""uint8_t [256]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_cache_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_cache_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t *)(uint8_t *) ((arg1)->inp_cache);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_inp_sess_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_sess_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_inp_sess_set" "', argument " "2"" of type '" "uint8_t [64]""'"); 
  } 
  arg2 = (uint8_t *)(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) arg1->inp_sess[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""inp_sess""' of type '""uint8_t [64]""'");
    }
  }
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_inp_sess_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_inp_sess_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t *)(uint8_t *) ((arg1)->inp_sess);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_have_modrm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_have_modrm_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_have_modrm_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->have_modrm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_have_modrm_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_have_modrm_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->have_modrm);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_modrm_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_modrm_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_modrm_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  if (arg1) (arg1)->modrm = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_modrm_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_modrm_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t) ((arg1)->modrm);
  jsresult = SWIG_From_unsigned_SS_char((unsigned char)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_user_opaque_data_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_user_opaque_data_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_user_opaque_data_set" "', argument " "2"" of type '" "void *""'"); 
  }
  if (arg1) (arg1)->user_opaque_data = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_user_opaque_data_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_user_opaque_data_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (void *) ((arg1)->user_opaque_data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_itab_entry_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  ud_itab_entry *arg2 = (ud_itab_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_itab_entry_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ud_itab_entry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_itab_entry_set" "', argument " "2"" of type '" "ud_itab_entry *""'"); 
  }
  arg2 = (ud_itab_entry *)(argp2);
  if (arg1) (arg1)->itab_entry = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_itab_entry_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ud_itab_entry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_itab_entry_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (ud_itab_entry *) ((arg1)->itab_entry);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ud_itab_entry, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_ud_le_set(v8::Local<v8::String> property, v8::Local<v8::Value> value, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  ud *arg1 = (ud *) 0 ;
  ud_lookup_table_list_entry *arg2 = (ud_lookup_table_list_entry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_le_set" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ud_lookup_table_list_entry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_le_set" "', argument " "2"" of type '" "ud_lookup_table_list_entry *""'"); 
  }
  arg2 = (ud_lookup_table_list_entry *)(argp2);
  if (arg1) (arg1)->le = arg2;
  
  
  
  goto fail;
fail:
  return;
}


v8::Handle<v8::Value> _wrap_ud_le_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ud_lookup_table_list_entry *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.Holder(), &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_le_get" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (ud_lookup_table_list_entry *) ((arg1)->le);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ud_lookup_table_list_entry, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_new_ud(const v8::Arguments& args) {
  v8::HandleScope scope;
  v8::Handle<v8::Object> self = args.Holder();
  ud *result;
  if(args.Length() != 0) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ud.");  
  result = (ud *)new ud();
  
  
  
  SWIGV8_SetPrivateData(self, result, SWIGTYPE_p_ud, SWIG_POINTER_OWN);
  return scope.Close(self);
  
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


void _wrap_delete_ud(v8::Persistent< v8::Value > object, void *parameter) {
  SWIGV8_Proxy* proxy = (SWIGV8_Proxy*) parameter;
  if(proxy->swigCMemOwn && proxy->swigCObject) {
    std::cout << "Deleting wrapped instance: " << proxy->info->name << std::endl;
    delete (ud *) proxy->swigCObject;
  }
  delete proxy;
}


v8::Handle<v8::Value> _wrap_UD_EOI(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(-1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_INP_CACHE_SZ(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(32));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_VENDOR_AMD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_VENDOR_INTEL(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_VENDOR_ANY(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_TABLE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_TABLE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_X87(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_X87));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_MOD(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_MOD));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_RM(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_RM));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_VENDOR(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_VENDOR));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_OSIZE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_OSIZE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_MODE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_MODE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_3DNOW(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_3DNOW));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_REG(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_REG));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_ASIZE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_ASIZE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_TAB__OPC_SSE(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_TAB__OPC_SSE));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvalid(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvalid));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_I3dnow(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_I3dnow));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Inone(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Inone));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipause(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipause));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaaa(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaaa));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaad(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaad));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaam(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaam));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaas(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaas));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iadc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iadc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iadd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iadd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iand(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iand));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iandpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iandpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iandps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iandps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iandnpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iandnpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iandnps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iandnps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iarpl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iarpl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsxd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsxd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibound(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibound));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibsf(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibsf));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibsr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibsr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibswap(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibswap));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibtc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibtc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibtr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibtr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ibts(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ibts));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icall(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icall));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icbw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icbw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icwde(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icwde));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icdqe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icdqe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iclc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iclc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iclflush(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iclflush));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iclgi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iclgi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icli(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icli));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iclts(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iclts));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovo(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovo));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovno(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovno));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovae(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovae));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovnz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovnz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovbe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovbe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmova(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmova));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovns(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovns));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovnp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovnp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovge(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovge));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovle(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovle));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmovg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmovg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmppd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmppd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpsq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpsq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpxchg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpxchg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icmpxchg8b(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icmpxchg8b));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icomisd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icomisd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icomiss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icomiss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icpuid(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icpuid));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtdq2pd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtdq2pd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtdq2ps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtdq2ps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtpd2dq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtpd2dq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtpd2pi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtpd2pi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtpd2ps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtpd2ps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtpi2ps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtpi2ps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtpi2pd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtpi2pd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtps2dq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtps2dq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtps2pi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtps2pi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtps2pd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtps2pd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtsd2si(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtsd2si));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtsd2ss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtsd2ss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtsi2ss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtsi2ss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtss2si(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtss2si));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtss2sd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtss2sd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttpd2pi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttpd2pi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttpd2dq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttpd2dq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttps2dq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttps2dq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttps2pi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttps2pi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttsd2si(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttsd2si));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvtsi2sd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvtsi2sd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icvttss2si(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icvttss2si));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icwd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icwd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icdq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icdq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Icqo(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Icqo));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idaa(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idaa));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idas(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idas));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idec(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idec));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idiv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idiv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idivpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idivpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idivps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idivps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idivsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idivsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idivss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idivss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iemms(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iemms));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ienter(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ienter));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_If2xm1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_If2xm1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifabs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifabs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifadd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifadd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifaddp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifaddp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifbld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifbld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifbstp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifbstp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifchs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifchs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifclex(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifclex));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmove(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmove));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovbe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovbe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovu(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovu));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovnb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovnb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovne(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovne));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovnbe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovnbe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcmovnu(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcmovnu));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifucomi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifucomi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcom(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcom));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcom2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcom2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcomp3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcomp3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcomi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcomi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifucomip(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifucomip));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcomip(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcomip));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcomp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcomp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcomp5(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcomp5));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcompp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcompp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifcos(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifcos));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifdecstp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifdecstp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifdiv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifdiv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifdivp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifdivp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifdivr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifdivr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifdivrp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifdivrp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifemms(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifemms));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iffree(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iffree));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iffreep(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iffreep));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ificom(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ificom));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ificomp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ificomp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifild(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifild));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifncstp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifncstp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifninit(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifninit));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifiadd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifiadd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifidivr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifidivr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifidiv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifidiv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifisub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifisub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifisubr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifisubr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifist(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifist));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifistp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifistp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifisttp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifisttp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifld1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifld1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldl2t(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldl2t));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldl2e(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldl2e));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldlpi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldlpi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldlg2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldlg2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldln2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldln2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldcw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldcw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifldenv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifldenv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifmul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifmul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifmulp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifmulp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifimul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifimul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifnop(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifnop));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifpatan(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifpatan));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifprem(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifprem));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifprem1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifprem1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifptan(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifptan));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifrndint(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifrndint));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifrstor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifrstor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifnsave(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifnsave));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifscale(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifscale));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsin(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsin));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsincos(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsincos));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsqrt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsqrt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifstp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifstp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifstp1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifstp1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifstp8(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifstp8));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifstp9(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifstp9));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifst(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifst));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifnstcw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifnstcw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifnstenv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifnstenv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifnstsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifnstsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsubp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsubp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsubr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsubr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifsubrp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifsubrp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iftst(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iftst));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifucom(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifucom));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifucomp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifucomp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifucompp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifucompp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxam(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxam));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxch(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxch));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxch4(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxch4));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxch7(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxch7));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxrstor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxrstor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifxsave(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifxsave));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifpxtract(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifpxtract));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifyl2x(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifyl2x));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ifyl2xp1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ifyl2xp1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ihlt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ihlt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iidiv(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iidiv));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iin(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iin));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iimul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iimul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iint1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iint1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iint3(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iint3));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iint(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iint));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinto(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinto));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvept(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvept));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvlpg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvlpg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvlpga(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvlpga));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iinvvpid(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iinvvpid));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iiretw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iiretw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iiretd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iiretd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iiretq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iiretq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijo(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijo));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijno(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijno));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijae(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijae));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijnz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijnz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijbe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijbe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ija(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ija));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijns(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijns));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijnp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijnp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijge(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijge));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijle(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijle));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijcxz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijcxz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijecxz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijecxz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijrcxz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijrcxz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ijmp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ijmp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilahf(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilahf));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilar(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilar));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilddqu(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilddqu));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ildmxcsr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ildmxcsr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilds(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilds));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilea(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilea));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iles(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iles));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilfs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilfs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilgs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilgs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilidt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilidt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ileave(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ileave));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilfence(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilfence));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilgdt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilgdt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Illdt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Illdt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilmsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilmsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilock(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilock));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilodsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilodsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilodsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilodsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilodsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilodsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilodsq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilodsq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iloopnz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iloopnz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iloope(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iloope));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iloop(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iloop));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ilsl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ilsl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iltr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iltr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imaskmovq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imaskmovq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imaxpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imaxpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imaxps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imaxps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imaxsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imaxsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imaxss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imaxss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imfence(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imfence));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iminpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iminpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iminps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iminps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iminsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iminsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iminss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iminss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imonitor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imonitor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imontmul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imontmul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imov(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imov));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovapd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovapd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovaps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovaps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovhpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovhpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovhps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovhps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovlhps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovlhps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovlpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovlpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovlps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovlps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovhlps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovhlps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovmskpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovmskpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovmskps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovmskps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovntdq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovntdq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovnti(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovnti));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovntpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovntpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovntps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovntps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovntq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovntq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsx(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsx));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovupd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovupd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovups(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovups));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovzx(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovzx));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imulpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imulpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imulps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imulps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imulsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imulsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imulss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imulss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imwait(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imwait));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ineg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ineg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Inop(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Inop));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Inot(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Inot));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ior(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ior));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iorpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iorpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iorps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iorps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iout(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iout));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ioutsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ioutsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ioutsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ioutsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ioutsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ioutsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ioutsq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ioutsq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipacksswb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipacksswb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipackssdw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipackssdw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipackuswb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipackuswb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddusb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddusb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddusw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddusw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipand(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipand));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipandn(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipandn));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipavgb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipavgb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipavgw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipavgw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpeqb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpeqb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpeqw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpeqw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpeqd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpeqd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpgtb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpgtb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpgtw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpgtw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipcmpgtd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipcmpgtd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipextrb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipextrb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipextrd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipextrd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipextrq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipextrq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipextrw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipextrw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipinsrw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipinsrw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaddwd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaddwd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaxsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaxsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaxub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaxub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmovmskb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmovmskb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmulhuw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmulhuw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmulhw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmulhw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmullw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmullw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipop(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipop));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipopa(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipopa));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipopad(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipopad));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipopfw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipopfw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipopfd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipopfd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipopfq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipopfq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iprefetch(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iprefetch));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iprefetchnta(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iprefetchnta));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iprefetcht0(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iprefetcht0));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iprefetcht1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iprefetcht1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iprefetcht2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iprefetcht2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsadbw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsadbw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipshufw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipshufw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsllw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsllw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipslld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipslld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsllq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsllq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsraw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsraw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsrad(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsrad));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsrlw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsrlw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsrld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsrld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsrlq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsrlq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubusb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubusb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubusw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubusw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpckhbw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpckhbw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpckhwd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpckhwd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpckhdq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpckhdq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpcklbw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpcklbw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpcklwd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpcklwd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpckldq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpckldq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipi2fw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipi2fw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipi2fd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipi2fd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipf2iw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipf2iw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipf2id(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipf2id));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfnacc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfnacc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfpnacc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfpnacc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfcmpge(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfcmpge));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfmin(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfmin));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfrcp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfrcp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfrsqrt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfrsqrt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfsub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfsub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfadd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfadd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfcmpgt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfcmpgt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfmax(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfmax));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfrcpit1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfrcpit1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfrsqit1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfrsqit1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfsubr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfsubr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfacc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfacc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfcmpeq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfcmpeq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfmul(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfmul));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipfrcpit2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipfrcpit2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmulhrw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmulhrw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipswapd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipswapd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipavgusb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipavgusb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipush(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipush));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipusha(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipusha));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipushad(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipushad));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipushfw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipushfw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipushfd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipushfd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipushfq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipushfq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipxor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipxor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ircl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ircl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ircr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ircr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irol(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irol));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iror(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iror));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ircpps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ircpps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ircpss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ircpss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irdmsr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irdmsr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irdpmc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irdpmc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irdtsc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irdtsc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irdtscp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irdtscp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irepne(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irepne));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irep(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irep));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iret(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iret));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iretf(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iretf));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irsm(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irsm));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irsqrtps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irsqrtps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Irsqrtss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Irsqrtss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isahf(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isahf));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isalc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isalc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isar(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isar));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isbb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isbb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iscasb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iscasb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iscasw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iscasw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iscasd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iscasd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iscasq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iscasq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iseto(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iseto));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetno(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetno));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetnb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetnb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetnz(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetnz));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetbe(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetbe));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iseta(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iseta));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isets(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isets));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetns(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetns));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetnp(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetnp));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetl(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetl));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetge(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetge));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetle(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetle));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isetg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isetg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isfence(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isfence));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isgdt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isgdt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishrd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishrd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishufpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishufpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ishufps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ishufps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isidt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isidt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isldt(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isldt));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ismsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ismsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isqrtps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isqrtps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isqrtpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isqrtpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isqrtsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isqrtsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isqrtss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isqrtss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istgi(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istgi));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isti(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isti));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iskinit(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iskinit));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istmxcsr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istmxcsr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istosb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istosb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istosw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istosw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istosd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istosd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istosq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istosq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Istr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Istr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isub(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isub));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isubpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isubpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isubps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isubps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isubsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isubsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isubss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isubss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iswapgs(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iswapgs));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isyscall(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isyscall));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isysenter(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isysenter));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isysexit(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isysexit));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Isysret(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Isysret));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Itest(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Itest));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iucomisd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iucomisd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iucomiss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iucomiss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iud2(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iud2));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iunpckhpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iunpckhpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iunpckhps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iunpckhps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iunpcklps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iunpcklps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iunpcklpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iunpcklpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iverr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iverr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iverw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iverw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmcall(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmcall));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmclear(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmclear));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmxon(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmxon));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmptrld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmptrld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmptrst(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmptrst));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmlaunch(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmlaunch));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmresume(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmresume));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmxoff(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmxoff));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmread(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmread));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmwrite(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmwrite));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmrun(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmrun));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmmcall(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmmcall));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmload(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmload));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ivmsave(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ivmsave));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iwait(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iwait));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iwbinvd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iwbinvd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iwrmsr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iwrmsr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixadd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixadd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixchg(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixchg));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixlatb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixlatb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixor(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixor));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixorpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixorpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixorps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixorps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixcryptecb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixcryptecb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixcryptcbc(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixcryptcbc));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixcryptctr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixcryptctr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixcryptcfb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixcryptcfb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixcryptofb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixcryptofb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixsha1(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixsha1));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixsha256(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixsha256));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ixstore(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ixstore));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovdqa(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovdqa));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovdq2q(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovdq2q));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovdqu(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovdqu));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovq2dq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovq2dq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipaddq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipaddq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsubq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsubq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmuludq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmuludq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipshufhw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipshufhw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipshuflw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipshuflw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipshufd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipshufd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipslldq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipslldq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsrldq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsrldq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpckhqdq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpckhqdq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipunpcklqdq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipunpcklqdq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddsubpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddsubpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iaddsubps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iaddsubps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ihaddpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ihaddpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ihaddps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ihaddps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ihsubpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ihsubpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ihsubps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ihsubps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovddup(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovddup));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovshdup(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovshdup));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Imovsldup(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Imovsldup));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipabsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipabsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipabsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipabsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipabsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipabsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsignb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsignb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphaddw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphaddw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphaddd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphaddd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphaddsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphaddsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaddubsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaddubsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphsubw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphsubw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphsubd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphsubd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphsubsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphsubsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsignd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsignd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipsignw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipsignw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmulhrsw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmulhrsw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipalignr(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipalignr));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipblendvb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipblendvb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmuldq(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmuldq));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminuw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminuw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipminud(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipminud));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaxsb(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaxsb));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaxsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaxsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmaxud(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmaxud));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipmulld(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipmulld));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iphminposuw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iphminposuw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iroundps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iroundps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iroundpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iroundpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iroundss(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iroundss));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iroundsd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iroundsd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iblendpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iblendpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Ipblendw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Ipblendw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iblendps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iblendps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iblendvpd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iblendvpd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iblendvps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iblendvps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idpps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idpps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Idppd(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Idppd));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Impsadbw(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Impsadbw));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_UD_Iextractps(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  
  jsresult = SWIG_From_int((int)(UD_Iextractps));
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_mnemonics_str_get(v8::Local<v8::String> property, const v8::AccessorInfo& info) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  char **result = 0 ;
  
  result = (char **)(char **)ud_mnemonics_str;
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_char, 0 |  0 );
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_init(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_init.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_init" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ud_init(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_mode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_mode.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_mode" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_char(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_set_mode" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = (uint8_t)(val2);
  ud_set_mode(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_pc(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_pc.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_pc" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_set_pc" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = (uint64_t)(val2);
  ud_set_pc(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_input_hook(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  int (*arg2)(ud *) = (int (*)(ud *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_input_hook.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_input_hook" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_ud__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ud_set_input_hook" "', argument " "2"" of type '" "int (*)(ud *)""'"); 
    }
  }
  ud_set_input_hook(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_input_buffer(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  
  if(args.Length() != 3) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_input_buffer.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_input_buffer" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_set_input_buffer" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = (uint8_t *)(argp2);
  ecode3 = SWIG_AsVal_size_t(args[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ud_set_input_buffer" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = (size_t)(val3);
  ud_set_input_buffer(arg1,arg2,arg3);
  jsresult = v8::Undefined();
  
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_input_file(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_input_file.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_input_file" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(args[1], &argp2,SWIGTYPE_p_FILE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_set_input_file" "', argument " "2"" of type '" "FILE *""'"); 
  }
  arg2 = (FILE *)(argp2);
  ud_set_input_file(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_vendor(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_vendor.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_vendor" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_set_vendor" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = (unsigned int)(val2);
  ud_set_vendor(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_syntax(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void (*arg2)(ud *) = (void (*)(ud *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_syntax.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_syntax" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(args[1], (void**)(&arg2), SWIGTYPE_p_f_p_ud__void);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "ud_set_syntax" "', argument " "2"" of type '" "void (*)(ud *)""'"); 
    }
  }
  ud_set_syntax(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_input_skip(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_input_skip.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_input_skip" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ecode2 = SWIG_AsVal_size_t(args[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ud_input_skip" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = (size_t)(val2);
  ud_input_skip(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_input_end(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_input_end.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_input_end" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (int)ud_input_end(arg1);
  jsresult = SWIG_From_int((int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_decode(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_decode.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_decode" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (unsigned int)ud_decode(arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_disassemble(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_disassemble.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_disassemble" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (unsigned int)ud_disassemble(arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_translate_intel(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_translate_intel.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_translate_intel" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ud_translate_intel(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_translate_att(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_translate_att.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_translate_att" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  ud_translate_att(arg1);
  jsresult = v8::Undefined();
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_insn_asm(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_insn_asm.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_asm" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (char *)ud_insn_asm(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_insn_ptr(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_insn_ptr.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_ptr" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint8_t *)ud_insn_ptr(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_insn_off(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_insn_off.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_off" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (uint64_t)ud_insn_off(arg1);
  jsresult = SWIG_From_unsigned_SS_long_SS_long((unsigned long long)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_insn_hex(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_insn_hex.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_hex" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (char *)ud_insn_hex(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_insn_len(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_insn_len.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_insn_len" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (unsigned int)ud_insn_len(arg1);
  jsresult = SWIG_From_unsigned_SS_int((unsigned int)(result));
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_lookup_mnemonic(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  enum ud_mnemonic_code arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_lookup_mnemonic.");  
  
  ecode1 = SWIG_AsVal_int(args[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ud_lookup_mnemonic" "', argument " "1"" of type '" "enum ud_mnemonic_code""'");
  } 
  arg1 = (enum ud_mnemonic_code)(val1);
  result = (char *)ud_lookup_mnemonic(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_set_user_opaque_data(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  if(args.Length() != 2) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_set_user_opaque_data.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_set_user_opaque_data" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  res2 = SWIG_ConvertPtr(args[1],SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ud_set_user_opaque_data" "', argument " "2"" of type '" "void *""'"); 
  }
  ud_set_user_opaque_data(arg1,arg2);
  jsresult = v8::Undefined();
  
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


v8::Handle<v8::Value> _wrap_ud_get_user_opaque_data(const v8::Arguments &args) {
  v8::HandleScope scope;
  v8::Handle<v8::Value> jsresult;
  ud *arg1 = (ud *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(args.Length() != 1) SWIG_exception_fail(SWIG_ERROR, "Illegal number of arguments for _wrap_ud_get_user_opaque_data.");  
  
  res1 = SWIG_ConvertPtr(args[0], &argp1,SWIGTYPE_p_ud, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ud_get_user_opaque_data" "', argument " "1"" of type '" "ud *""'"); 
  }
  arg1 = (ud *)(argp1);
  result = (void *)ud_get_user_opaque_data(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return scope.Close(jsresult);
  goto fail;
fail:
  return scope.Close(v8::Undefined());
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ud__int = {"_p_f_p_ud__int", "int (*)(ud *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_ud__void = {"_p_f_p_ud__void", "void (*)(ud *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_imaxdiv_t = {"_p_imaxdiv_t", "imaxdiv_t *|p_imaxdiv_t", 0, 0, (void*)&_imaxdiv_t_clientData, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|int32_t *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|int64_t *|long long *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_map_entry = {"_p_map_entry", "map_entry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ud = {"_p_ud", "ud_t *|p_ud|ud *", 0, 0, (void*)&_ud_clientData, 0};
static swig_type_info _swigt__p_ud_itab_entry = {"_p_ud_itab_entry", "ud_itab_entry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ud_lookup_table_list_entry = {"_p_ud_lookup_table_list_entry", "ud_lookup_table_list_entry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ud_mnemonic_code = {"_p_ud_mnemonic_code", "enum ud_mnemonic_code *|ud_mnemonic_code_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ud_operand = {"_p_ud_operand", "ud_operand *|ud_operand_t *|p_ud_operand", 0, 0, (void*)&_ud_operand_clientData, 0};
static swig_type_info _swigt__p_ud_type = {"_p_ud_type", "enum ud_type *|ud_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|unsigned int *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_FILE,
  &_swigt__p_char,
  &_swigt__p_f_p_ud__int,
  &_swigt__p_f_p_ud__void,
  &_swigt__p_imaxdiv_t,
  &_swigt__p_int,
  &_swigt__p_long_long,
  &_swigt__p_map_entry,
  &_swigt__p_p_char,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_ud,
  &_swigt__p_ud_itab_entry,
  &_swigt__p_ud_lookup_table_list_entry,
  &_swigt__p_ud_mnemonic_code,
  &_swigt__p_ud_operand,
  &_swigt__p_ud_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ud__int[] = {  {&_swigt__p_f_p_ud__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_ud__void[] = {  {&_swigt__p_f_p_ud__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_imaxdiv_t[] = {  {&_swigt__p_imaxdiv_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_map_entry[] = {  {&_swigt__p_map_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud[] = {  {&_swigt__p_ud, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud_itab_entry[] = {  {&_swigt__p_ud_itab_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud_lookup_table_list_entry[] = {  {&_swigt__p_ud_lookup_table_list_entry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud_mnemonic_code[] = {  {&_swigt__p_ud_mnemonic_code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud_operand[] = {  {&_swigt__p_ud_operand, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ud_type[] = {  {&_swigt__p_ud_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_FILE,
  _swigc__p_char,
  _swigc__p_f_p_ud__int,
  _swigc__p_f_p_ud__void,
  _swigc__p_imaxdiv_t,
  _swigc__p_int,
  _swigc__p_long_long,
  _swigc__p_map_entry,
  _swigc__p_p_char,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_ud,
  _swigc__p_ud_itab_entry,
  _swigc__p_ud_lookup_table_list_entry,
  _swigc__p_ud_mnemonic_code,
  _swigc__p_ud_operand,
  _swigc__p_ud_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */



SWIGRUNTIME void
SWIG_V8_SetModule(swig_module_info *swig_module) {}

SWIGRUNTIME swig_module_info *
SWIG_V8_GetModule(void) {
  return 0;
}

#define SWIG_GetModule(clientdata)                SWIG_V8_GetModule()
#define SWIG_SetModule(clientdata, pointer)       SWIG_V8_SetModule(pointer)


/************  BEGIN: "swiginit.swg" *******************/ 
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif

/************  END:   "swiginit.swg" *******************/ 

extern "C" {
  void UDis86_initialize(v8::Handle<v8::Object> global_obj)
  {
    SWIG_InitializeModule(0);
    
    v8::HandleScope scope;
    
    // a class template for creating proxies of undefined types
    SWIGV8_SWIGTYPE_Proxy_class_templ = SWIGV8_CreateClassTemplate("SwigProxy");
    
    /* create objects for namespaces */
    
    
    /* create class templates */
    v8::Handle<v8::FunctionTemplate> _imaxdiv_t_class = SWIGV8_CreateClassTemplate("_imaxdiv_t");
    _imaxdiv_t_clientData.class_templ = _imaxdiv_t_class;
    _imaxdiv_t_clientData.dtor = _wrap_delete_imaxdiv_t;  
    SWIGTYPE_p_imaxdiv_t->clientdata = &_imaxdiv_t_clientData;
    v8::Handle<v8::FunctionTemplate> _ud_operand_class = SWIGV8_CreateClassTemplate("_ud_operand");
    _ud_operand_clientData.class_templ = _ud_operand_class;
    _ud_operand_clientData.dtor = _wrap_delete_ud_operand;  
    SWIGTYPE_p_ud_operand->clientdata = &_ud_operand_clientData;
    v8::Handle<v8::FunctionTemplate> _ud_class = SWIGV8_CreateClassTemplate("_ud");
    _ud_clientData.class_templ = _ud_class;
    _ud_clientData.dtor = _wrap_delete_ud;  
    SWIGTYPE_p_ud->clientdata = &_ud_clientData;
    
    
    /* register wrapper functions */
    SWIGV8_AddMemberVariable(_imaxdiv_t_class, "quot", _wrap_imaxdiv_t_quot_get, _wrap_imaxdiv_t_quot_set);
    SWIGV8_AddMemberVariable(_imaxdiv_t_class, "rem", _wrap_imaxdiv_t_rem_get, _wrap_imaxdiv_t_rem_set);
    SWIGV8_AddStaticVariable(global_obj, "FMT64", _wrap_FMT64, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_NONE", _wrap_UD_NONE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_AL", _wrap_UD_R_AL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CL", _wrap_UD_R_CL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DL", _wrap_UD_R_DL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_BL", _wrap_UD_R_BL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_AH", _wrap_UD_R_AH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CH", _wrap_UD_R_CH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DH", _wrap_UD_R_DH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_BH", _wrap_UD_R_BH, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_SPL", _wrap_UD_R_SPL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_BPL", _wrap_UD_R_BPL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_SIL", _wrap_UD_R_SIL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DIL", _wrap_UD_R_DIL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R8B", _wrap_UD_R_R8B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R9B", _wrap_UD_R_R9B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R10B", _wrap_UD_R_R10B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R11B", _wrap_UD_R_R11B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R12B", _wrap_UD_R_R12B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R13B", _wrap_UD_R_R13B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R14B", _wrap_UD_R_R14B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R15B", _wrap_UD_R_R15B, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_AX", _wrap_UD_R_AX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CX", _wrap_UD_R_CX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DX", _wrap_UD_R_DX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_BX", _wrap_UD_R_BX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_SP", _wrap_UD_R_SP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_BP", _wrap_UD_R_BP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_SI", _wrap_UD_R_SI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DI", _wrap_UD_R_DI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R8W", _wrap_UD_R_R8W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R9W", _wrap_UD_R_R9W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R10W", _wrap_UD_R_R10W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R11W", _wrap_UD_R_R11W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R12W", _wrap_UD_R_R12W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R13W", _wrap_UD_R_R13W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R14W", _wrap_UD_R_R14W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R15W", _wrap_UD_R_R15W, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_EAX", _wrap_UD_R_EAX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ECX", _wrap_UD_R_ECX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_EDX", _wrap_UD_R_EDX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_EBX", _wrap_UD_R_EBX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ESP", _wrap_UD_R_ESP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_EBP", _wrap_UD_R_EBP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ESI", _wrap_UD_R_ESI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_EDI", _wrap_UD_R_EDI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R8D", _wrap_UD_R_R8D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R9D", _wrap_UD_R_R9D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R10D", _wrap_UD_R_R10D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R11D", _wrap_UD_R_R11D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R12D", _wrap_UD_R_R12D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R13D", _wrap_UD_R_R13D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R14D", _wrap_UD_R_R14D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R15D", _wrap_UD_R_R15D, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RAX", _wrap_UD_R_RAX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RCX", _wrap_UD_R_RCX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RDX", _wrap_UD_R_RDX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RBX", _wrap_UD_R_RBX, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RSP", _wrap_UD_R_RSP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RBP", _wrap_UD_R_RBP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RSI", _wrap_UD_R_RSI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RDI", _wrap_UD_R_RDI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R8", _wrap_UD_R_R8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R9", _wrap_UD_R_R9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R10", _wrap_UD_R_R10, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R11", _wrap_UD_R_R11, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R12", _wrap_UD_R_R12, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R13", _wrap_UD_R_R13, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R14", _wrap_UD_R_R14, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_R15", _wrap_UD_R_R15, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ES", _wrap_UD_R_ES, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CS", _wrap_UD_R_CS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_SS", _wrap_UD_R_SS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DS", _wrap_UD_R_DS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_FS", _wrap_UD_R_FS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_GS", _wrap_UD_R_GS, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR0", _wrap_UD_R_CR0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR1", _wrap_UD_R_CR1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR2", _wrap_UD_R_CR2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR3", _wrap_UD_R_CR3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR4", _wrap_UD_R_CR4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR5", _wrap_UD_R_CR5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR6", _wrap_UD_R_CR6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR7", _wrap_UD_R_CR7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR8", _wrap_UD_R_CR8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR9", _wrap_UD_R_CR9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR10", _wrap_UD_R_CR10, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR11", _wrap_UD_R_CR11, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR12", _wrap_UD_R_CR12, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR13", _wrap_UD_R_CR13, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR14", _wrap_UD_R_CR14, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_CR15", _wrap_UD_R_CR15, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR0", _wrap_UD_R_DR0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR1", _wrap_UD_R_DR1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR2", _wrap_UD_R_DR2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR3", _wrap_UD_R_DR3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR4", _wrap_UD_R_DR4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR5", _wrap_UD_R_DR5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR6", _wrap_UD_R_DR6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR7", _wrap_UD_R_DR7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR8", _wrap_UD_R_DR8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR9", _wrap_UD_R_DR9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR10", _wrap_UD_R_DR10, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR11", _wrap_UD_R_DR11, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR12", _wrap_UD_R_DR12, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR13", _wrap_UD_R_DR13, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR14", _wrap_UD_R_DR14, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_DR15", _wrap_UD_R_DR15, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM0", _wrap_UD_R_MM0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM1", _wrap_UD_R_MM1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM2", _wrap_UD_R_MM2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM3", _wrap_UD_R_MM3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM4", _wrap_UD_R_MM4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM5", _wrap_UD_R_MM5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM6", _wrap_UD_R_MM6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_MM7", _wrap_UD_R_MM7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST0", _wrap_UD_R_ST0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST1", _wrap_UD_R_ST1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST2", _wrap_UD_R_ST2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST3", _wrap_UD_R_ST3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST4", _wrap_UD_R_ST4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST5", _wrap_UD_R_ST5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST6", _wrap_UD_R_ST6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_ST7", _wrap_UD_R_ST7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM0", _wrap_UD_R_XMM0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM1", _wrap_UD_R_XMM1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM2", _wrap_UD_R_XMM2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM3", _wrap_UD_R_XMM3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM4", _wrap_UD_R_XMM4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM5", _wrap_UD_R_XMM5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM6", _wrap_UD_R_XMM6, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM7", _wrap_UD_R_XMM7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM8", _wrap_UD_R_XMM8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM9", _wrap_UD_R_XMM9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM10", _wrap_UD_R_XMM10, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM11", _wrap_UD_R_XMM11, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM12", _wrap_UD_R_XMM12, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM13", _wrap_UD_R_XMM13, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM14", _wrap_UD_R_XMM14, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_XMM15", _wrap_UD_R_XMM15, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_R_RIP", _wrap_UD_R_RIP, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_REG", _wrap_UD_OP_REG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_MEM", _wrap_UD_OP_MEM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_PTR", _wrap_UD_OP_PTR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_IMM", _wrap_UD_OP_IMM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_JIMM", _wrap_UD_OP_JIMM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_OP_CONST", _wrap_UD_OP_CONST, JS_veto_set_variable);
    SWIGV8_AddMemberVariable(_ud_operand_class, "type", _wrap_ud_operand_type_get, _wrap_ud_operand_type_set);
    SWIGV8_AddMemberVariable(_ud_operand_class, "size", _wrap_ud_operand_size_get, _wrap_ud_operand_size_set);
    SWIGV8_AddMemberVariable(_ud_operand_class, "base", _wrap_ud_operand_base_get, _wrap_ud_operand_base_set);
    SWIGV8_AddMemberVariable(_ud_operand_class, "index", _wrap_ud_operand_index_get, _wrap_ud_operand_index_set);
    SWIGV8_AddMemberVariable(_ud_operand_class, "offset", _wrap_ud_operand_offset_get, _wrap_ud_operand_offset_set);
    SWIGV8_AddMemberVariable(_ud_operand_class, "scale", _wrap_ud_operand_scale_get, _wrap_ud_operand_scale_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_hook", _wrap_ud_inp_hook_get, _wrap_ud_inp_hook_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_curr", _wrap_ud_inp_curr_get, _wrap_ud_inp_curr_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_fill", _wrap_ud_inp_fill_get, _wrap_ud_inp_fill_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_file", _wrap_ud_inp_file_get, _wrap_ud_inp_file_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_ctr", _wrap_ud_inp_ctr_get, _wrap_ud_inp_ctr_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_buff", _wrap_ud_inp_buff_get, _wrap_ud_inp_buff_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_buff_end", _wrap_ud_inp_buff_end_get, _wrap_ud_inp_buff_end_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_end", _wrap_ud_inp_end_get, _wrap_ud_inp_end_set);
    SWIGV8_AddMemberVariable(_ud_class, "translator", _wrap_ud_translator_get, _wrap_ud_translator_set);
    SWIGV8_AddMemberVariable(_ud_class, "insn_offset", _wrap_ud_insn_offset_get, _wrap_ud_insn_offset_set);
    SWIGV8_AddMemberVariable(_ud_class, "insn_hexcode", _wrap_ud_insn_hexcode_get, _wrap_ud_insn_hexcode_set);
    SWIGV8_AddMemberVariable(_ud_class, "insn_buffer", _wrap_ud_insn_buffer_get, _wrap_ud_insn_buffer_set);
    SWIGV8_AddMemberVariable(_ud_class, "insn_fill", _wrap_ud_insn_fill_get, _wrap_ud_insn_fill_set);
    SWIGV8_AddMemberVariable(_ud_class, "dis_mode", _wrap_ud_dis_mode_get, _wrap_ud_dis_mode_set);
    SWIGV8_AddMemberVariable(_ud_class, "pc", _wrap_ud_pc_get, _wrap_ud_pc_set);
    SWIGV8_AddMemberVariable(_ud_class, "vendor", _wrap_ud_vendor_get, _wrap_ud_vendor_set);
    SWIGV8_AddMemberVariable(_ud_class, "mapen", _wrap_ud_mapen_get, _wrap_ud_mapen_set);
    SWIGV8_AddMemberVariable(_ud_class, "mnemonic", _wrap_ud_mnemonic_get, _wrap_ud_mnemonic_set);
    SWIGV8_AddMemberVariable(_ud_class, "operand", _wrap_ud_operand_get, _wrap_ud_operand_set);
    SWIGV8_AddMemberVariable(_ud_class, "error", _wrap_ud_error_get, _wrap_ud_error_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_rex", _wrap_ud_pfx_rex_get, _wrap_ud_pfx_rex_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_seg", _wrap_ud_pfx_seg_get, _wrap_ud_pfx_seg_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_opr", _wrap_ud_pfx_opr_get, _wrap_ud_pfx_opr_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_adr", _wrap_ud_pfx_adr_get, _wrap_ud_pfx_adr_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_lock", _wrap_ud_pfx_lock_get, _wrap_ud_pfx_lock_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_rep", _wrap_ud_pfx_rep_get, _wrap_ud_pfx_rep_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_repe", _wrap_ud_pfx_repe_get, _wrap_ud_pfx_repe_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_repne", _wrap_ud_pfx_repne_get, _wrap_ud_pfx_repne_set);
    SWIGV8_AddMemberVariable(_ud_class, "pfx_insn", _wrap_ud_pfx_insn_get, _wrap_ud_pfx_insn_set);
    SWIGV8_AddMemberVariable(_ud_class, "default64", _wrap_ud_default64_get, _wrap_ud_default64_set);
    SWIGV8_AddMemberVariable(_ud_class, "opr_mode", _wrap_ud_opr_mode_get, _wrap_ud_opr_mode_set);
    SWIGV8_AddMemberVariable(_ud_class, "adr_mode", _wrap_ud_adr_mode_get, _wrap_ud_adr_mode_set);
    SWIGV8_AddMemberVariable(_ud_class, "br_far", _wrap_ud_br_far_get, _wrap_ud_br_far_set);
    SWIGV8_AddMemberVariable(_ud_class, "br_near", _wrap_ud_br_near_get, _wrap_ud_br_near_set);
    SWIGV8_AddMemberVariable(_ud_class, "implicit_addr", _wrap_ud_implicit_addr_get, _wrap_ud_implicit_addr_set);
    SWIGV8_AddMemberVariable(_ud_class, "c1", _wrap_ud_c1_get, _wrap_ud_c1_set);
    SWIGV8_AddMemberVariable(_ud_class, "c2", _wrap_ud_c2_get, _wrap_ud_c2_set);
    SWIGV8_AddMemberVariable(_ud_class, "c3", _wrap_ud_c3_get, _wrap_ud_c3_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_cache", _wrap_ud_inp_cache_get, _wrap_ud_inp_cache_set);
    SWIGV8_AddMemberVariable(_ud_class, "inp_sess", _wrap_ud_inp_sess_get, _wrap_ud_inp_sess_set);
    SWIGV8_AddMemberVariable(_ud_class, "have_modrm", _wrap_ud_have_modrm_get, _wrap_ud_have_modrm_set);
    SWIGV8_AddMemberVariable(_ud_class, "modrm", _wrap_ud_modrm_get, _wrap_ud_modrm_set);
    SWIGV8_AddMemberVariable(_ud_class, "user_opaque_data", _wrap_ud_user_opaque_data_get, _wrap_ud_user_opaque_data_set);
    SWIGV8_AddMemberVariable(_ud_class, "itab_entry", _wrap_ud_itab_entry_get, _wrap_ud_itab_entry_set);
    SWIGV8_AddMemberVariable(_ud_class, "le", _wrap_ud_le_get, _wrap_ud_le_set);
    SWIGV8_AddStaticVariable(global_obj, "UD_EOI", _wrap_UD_EOI, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_INP_CACHE_SZ", _wrap_UD_INP_CACHE_SZ, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_VENDOR_AMD", _wrap_UD_VENDOR_AMD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_VENDOR_INTEL", _wrap_UD_VENDOR_INTEL, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_VENDOR_ANY", _wrap_UD_VENDOR_ANY, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_TABLE", _wrap_UD_TAB__OPC_TABLE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_X87", _wrap_UD_TAB__OPC_X87, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_MOD", _wrap_UD_TAB__OPC_MOD, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_RM", _wrap_UD_TAB__OPC_RM, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_VENDOR", _wrap_UD_TAB__OPC_VENDOR, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_OSIZE", _wrap_UD_TAB__OPC_OSIZE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_MODE", _wrap_UD_TAB__OPC_MODE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_3DNOW", _wrap_UD_TAB__OPC_3DNOW, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_REG", _wrap_UD_TAB__OPC_REG, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_ASIZE", _wrap_UD_TAB__OPC_ASIZE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_TAB__OPC_SSE", _wrap_UD_TAB__OPC_SSE, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvalid", _wrap_UD_Iinvalid, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_I3dnow", _wrap_UD_I3dnow, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Inone", _wrap_UD_Inone, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idb", _wrap_UD_Idb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipause", _wrap_UD_Ipause, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaaa", _wrap_UD_Iaaa, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaad", _wrap_UD_Iaad, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaam", _wrap_UD_Iaam, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaas", _wrap_UD_Iaas, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iadc", _wrap_UD_Iadc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iadd", _wrap_UD_Iadd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddpd", _wrap_UD_Iaddpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddps", _wrap_UD_Iaddps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddsd", _wrap_UD_Iaddsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddss", _wrap_UD_Iaddss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iand", _wrap_UD_Iand, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iandpd", _wrap_UD_Iandpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iandps", _wrap_UD_Iandps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iandnpd", _wrap_UD_Iandnpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iandnps", _wrap_UD_Iandnps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iarpl", _wrap_UD_Iarpl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsxd", _wrap_UD_Imovsxd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibound", _wrap_UD_Ibound, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibsf", _wrap_UD_Ibsf, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibsr", _wrap_UD_Ibsr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibswap", _wrap_UD_Ibswap, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibt", _wrap_UD_Ibt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibtc", _wrap_UD_Ibtc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibtr", _wrap_UD_Ibtr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ibts", _wrap_UD_Ibts, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icall", _wrap_UD_Icall, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icbw", _wrap_UD_Icbw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icwde", _wrap_UD_Icwde, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icdqe", _wrap_UD_Icdqe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iclc", _wrap_UD_Iclc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icld", _wrap_UD_Icld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iclflush", _wrap_UD_Iclflush, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iclgi", _wrap_UD_Iclgi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icli", _wrap_UD_Icli, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iclts", _wrap_UD_Iclts, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmc", _wrap_UD_Icmc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovo", _wrap_UD_Icmovo, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovno", _wrap_UD_Icmovno, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovb", _wrap_UD_Icmovb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovae", _wrap_UD_Icmovae, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovz", _wrap_UD_Icmovz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovnz", _wrap_UD_Icmovnz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovbe", _wrap_UD_Icmovbe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmova", _wrap_UD_Icmova, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovs", _wrap_UD_Icmovs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovns", _wrap_UD_Icmovns, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovp", _wrap_UD_Icmovp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovnp", _wrap_UD_Icmovnp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovl", _wrap_UD_Icmovl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovge", _wrap_UD_Icmovge, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovle", _wrap_UD_Icmovle, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmovg", _wrap_UD_Icmovg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmp", _wrap_UD_Icmp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmppd", _wrap_UD_Icmppd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpps", _wrap_UD_Icmpps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpsb", _wrap_UD_Icmpsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpsw", _wrap_UD_Icmpsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpsd", _wrap_UD_Icmpsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpsq", _wrap_UD_Icmpsq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpss", _wrap_UD_Icmpss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpxchg", _wrap_UD_Icmpxchg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icmpxchg8b", _wrap_UD_Icmpxchg8b, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icomisd", _wrap_UD_Icomisd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icomiss", _wrap_UD_Icomiss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icpuid", _wrap_UD_Icpuid, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtdq2pd", _wrap_UD_Icvtdq2pd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtdq2ps", _wrap_UD_Icvtdq2ps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtpd2dq", _wrap_UD_Icvtpd2dq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtpd2pi", _wrap_UD_Icvtpd2pi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtpd2ps", _wrap_UD_Icvtpd2ps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtpi2ps", _wrap_UD_Icvtpi2ps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtpi2pd", _wrap_UD_Icvtpi2pd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtps2dq", _wrap_UD_Icvtps2dq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtps2pi", _wrap_UD_Icvtps2pi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtps2pd", _wrap_UD_Icvtps2pd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtsd2si", _wrap_UD_Icvtsd2si, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtsd2ss", _wrap_UD_Icvtsd2ss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtsi2ss", _wrap_UD_Icvtsi2ss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtss2si", _wrap_UD_Icvtss2si, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtss2sd", _wrap_UD_Icvtss2sd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttpd2pi", _wrap_UD_Icvttpd2pi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttpd2dq", _wrap_UD_Icvttpd2dq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttps2dq", _wrap_UD_Icvttps2dq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttps2pi", _wrap_UD_Icvttps2pi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttsd2si", _wrap_UD_Icvttsd2si, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvtsi2sd", _wrap_UD_Icvtsi2sd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icvttss2si", _wrap_UD_Icvttss2si, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icwd", _wrap_UD_Icwd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icdq", _wrap_UD_Icdq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Icqo", _wrap_UD_Icqo, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idaa", _wrap_UD_Idaa, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idas", _wrap_UD_Idas, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idec", _wrap_UD_Idec, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idiv", _wrap_UD_Idiv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idivpd", _wrap_UD_Idivpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idivps", _wrap_UD_Idivps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idivsd", _wrap_UD_Idivsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idivss", _wrap_UD_Idivss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iemms", _wrap_UD_Iemms, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ienter", _wrap_UD_Ienter, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_If2xm1", _wrap_UD_If2xm1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifabs", _wrap_UD_Ifabs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifadd", _wrap_UD_Ifadd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifaddp", _wrap_UD_Ifaddp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifbld", _wrap_UD_Ifbld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifbstp", _wrap_UD_Ifbstp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifchs", _wrap_UD_Ifchs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifclex", _wrap_UD_Ifclex, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovb", _wrap_UD_Ifcmovb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmove", _wrap_UD_Ifcmove, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovbe", _wrap_UD_Ifcmovbe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovu", _wrap_UD_Ifcmovu, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovnb", _wrap_UD_Ifcmovnb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovne", _wrap_UD_Ifcmovne, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovnbe", _wrap_UD_Ifcmovnbe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcmovnu", _wrap_UD_Ifcmovnu, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifucomi", _wrap_UD_Ifucomi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcom", _wrap_UD_Ifcom, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcom2", _wrap_UD_Ifcom2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcomp3", _wrap_UD_Ifcomp3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcomi", _wrap_UD_Ifcomi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifucomip", _wrap_UD_Ifucomip, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcomip", _wrap_UD_Ifcomip, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcomp", _wrap_UD_Ifcomp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcomp5", _wrap_UD_Ifcomp5, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcompp", _wrap_UD_Ifcompp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifcos", _wrap_UD_Ifcos, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifdecstp", _wrap_UD_Ifdecstp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifdiv", _wrap_UD_Ifdiv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifdivp", _wrap_UD_Ifdivp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifdivr", _wrap_UD_Ifdivr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifdivrp", _wrap_UD_Ifdivrp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifemms", _wrap_UD_Ifemms, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iffree", _wrap_UD_Iffree, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iffreep", _wrap_UD_Iffreep, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ificom", _wrap_UD_Ificom, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ificomp", _wrap_UD_Ificomp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifild", _wrap_UD_Ifild, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifncstp", _wrap_UD_Ifncstp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifninit", _wrap_UD_Ifninit, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifiadd", _wrap_UD_Ifiadd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifidivr", _wrap_UD_Ifidivr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifidiv", _wrap_UD_Ifidiv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifisub", _wrap_UD_Ifisub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifisubr", _wrap_UD_Ifisubr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifist", _wrap_UD_Ifist, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifistp", _wrap_UD_Ifistp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifisttp", _wrap_UD_Ifisttp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifld", _wrap_UD_Ifld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifld1", _wrap_UD_Ifld1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldl2t", _wrap_UD_Ifldl2t, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldl2e", _wrap_UD_Ifldl2e, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldlpi", _wrap_UD_Ifldlpi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldlg2", _wrap_UD_Ifldlg2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldln2", _wrap_UD_Ifldln2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldz", _wrap_UD_Ifldz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldcw", _wrap_UD_Ifldcw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifldenv", _wrap_UD_Ifldenv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifmul", _wrap_UD_Ifmul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifmulp", _wrap_UD_Ifmulp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifimul", _wrap_UD_Ifimul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifnop", _wrap_UD_Ifnop, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifpatan", _wrap_UD_Ifpatan, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifprem", _wrap_UD_Ifprem, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifprem1", _wrap_UD_Ifprem1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifptan", _wrap_UD_Ifptan, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifrndint", _wrap_UD_Ifrndint, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifrstor", _wrap_UD_Ifrstor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifnsave", _wrap_UD_Ifnsave, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifscale", _wrap_UD_Ifscale, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsin", _wrap_UD_Ifsin, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsincos", _wrap_UD_Ifsincos, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsqrt", _wrap_UD_Ifsqrt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifstp", _wrap_UD_Ifstp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifstp1", _wrap_UD_Ifstp1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifstp8", _wrap_UD_Ifstp8, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifstp9", _wrap_UD_Ifstp9, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifst", _wrap_UD_Ifst, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifnstcw", _wrap_UD_Ifnstcw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifnstenv", _wrap_UD_Ifnstenv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifnstsw", _wrap_UD_Ifnstsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsub", _wrap_UD_Ifsub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsubp", _wrap_UD_Ifsubp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsubr", _wrap_UD_Ifsubr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifsubrp", _wrap_UD_Ifsubrp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iftst", _wrap_UD_Iftst, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifucom", _wrap_UD_Ifucom, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifucomp", _wrap_UD_Ifucomp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifucompp", _wrap_UD_Ifucompp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxam", _wrap_UD_Ifxam, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxch", _wrap_UD_Ifxch, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxch4", _wrap_UD_Ifxch4, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxch7", _wrap_UD_Ifxch7, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxrstor", _wrap_UD_Ifxrstor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifxsave", _wrap_UD_Ifxsave, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifpxtract", _wrap_UD_Ifpxtract, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifyl2x", _wrap_UD_Ifyl2x, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ifyl2xp1", _wrap_UD_Ifyl2xp1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ihlt", _wrap_UD_Ihlt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iidiv", _wrap_UD_Iidiv, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iin", _wrap_UD_Iin, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iimul", _wrap_UD_Iimul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinc", _wrap_UD_Iinc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinsb", _wrap_UD_Iinsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinsw", _wrap_UD_Iinsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinsd", _wrap_UD_Iinsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iint1", _wrap_UD_Iint1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iint3", _wrap_UD_Iint3, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iint", _wrap_UD_Iint, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinto", _wrap_UD_Iinto, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvd", _wrap_UD_Iinvd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvept", _wrap_UD_Iinvept, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvlpg", _wrap_UD_Iinvlpg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvlpga", _wrap_UD_Iinvlpga, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iinvvpid", _wrap_UD_Iinvvpid, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iiretw", _wrap_UD_Iiretw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iiretd", _wrap_UD_Iiretd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iiretq", _wrap_UD_Iiretq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijo", _wrap_UD_Ijo, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijno", _wrap_UD_Ijno, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijb", _wrap_UD_Ijb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijae", _wrap_UD_Ijae, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijz", _wrap_UD_Ijz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijnz", _wrap_UD_Ijnz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijbe", _wrap_UD_Ijbe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ija", _wrap_UD_Ija, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijs", _wrap_UD_Ijs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijns", _wrap_UD_Ijns, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijp", _wrap_UD_Ijp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijnp", _wrap_UD_Ijnp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijl", _wrap_UD_Ijl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijge", _wrap_UD_Ijge, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijle", _wrap_UD_Ijle, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijg", _wrap_UD_Ijg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijcxz", _wrap_UD_Ijcxz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijecxz", _wrap_UD_Ijecxz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijrcxz", _wrap_UD_Ijrcxz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ijmp", _wrap_UD_Ijmp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilahf", _wrap_UD_Ilahf, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilar", _wrap_UD_Ilar, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilddqu", _wrap_UD_Ilddqu, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ildmxcsr", _wrap_UD_Ildmxcsr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilds", _wrap_UD_Ilds, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilea", _wrap_UD_Ilea, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iles", _wrap_UD_Iles, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilfs", _wrap_UD_Ilfs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilgs", _wrap_UD_Ilgs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilidt", _wrap_UD_Ilidt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilss", _wrap_UD_Ilss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ileave", _wrap_UD_Ileave, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilfence", _wrap_UD_Ilfence, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilgdt", _wrap_UD_Ilgdt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Illdt", _wrap_UD_Illdt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilmsw", _wrap_UD_Ilmsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilock", _wrap_UD_Ilock, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilodsb", _wrap_UD_Ilodsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilodsw", _wrap_UD_Ilodsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilodsd", _wrap_UD_Ilodsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilodsq", _wrap_UD_Ilodsq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iloopnz", _wrap_UD_Iloopnz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iloope", _wrap_UD_Iloope, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iloop", _wrap_UD_Iloop, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ilsl", _wrap_UD_Ilsl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iltr", _wrap_UD_Iltr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imaskmovq", _wrap_UD_Imaskmovq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imaxpd", _wrap_UD_Imaxpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imaxps", _wrap_UD_Imaxps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imaxsd", _wrap_UD_Imaxsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imaxss", _wrap_UD_Imaxss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imfence", _wrap_UD_Imfence, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iminpd", _wrap_UD_Iminpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iminps", _wrap_UD_Iminps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iminsd", _wrap_UD_Iminsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iminss", _wrap_UD_Iminss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imonitor", _wrap_UD_Imonitor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imontmul", _wrap_UD_Imontmul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imov", _wrap_UD_Imov, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovapd", _wrap_UD_Imovapd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovaps", _wrap_UD_Imovaps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovd", _wrap_UD_Imovd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovhpd", _wrap_UD_Imovhpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovhps", _wrap_UD_Imovhps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovlhps", _wrap_UD_Imovlhps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovlpd", _wrap_UD_Imovlpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovlps", _wrap_UD_Imovlps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovhlps", _wrap_UD_Imovhlps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovmskpd", _wrap_UD_Imovmskpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovmskps", _wrap_UD_Imovmskps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovntdq", _wrap_UD_Imovntdq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovnti", _wrap_UD_Imovnti, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovntpd", _wrap_UD_Imovntpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovntps", _wrap_UD_Imovntps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovntq", _wrap_UD_Imovntq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovq", _wrap_UD_Imovq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsb", _wrap_UD_Imovsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsw", _wrap_UD_Imovsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsd", _wrap_UD_Imovsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsq", _wrap_UD_Imovsq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovss", _wrap_UD_Imovss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsx", _wrap_UD_Imovsx, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovupd", _wrap_UD_Imovupd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovups", _wrap_UD_Imovups, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovzx", _wrap_UD_Imovzx, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imul", _wrap_UD_Imul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imulpd", _wrap_UD_Imulpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imulps", _wrap_UD_Imulps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imulsd", _wrap_UD_Imulsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imulss", _wrap_UD_Imulss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imwait", _wrap_UD_Imwait, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ineg", _wrap_UD_Ineg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Inop", _wrap_UD_Inop, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Inot", _wrap_UD_Inot, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ior", _wrap_UD_Ior, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iorpd", _wrap_UD_Iorpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iorps", _wrap_UD_Iorps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iout", _wrap_UD_Iout, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ioutsb", _wrap_UD_Ioutsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ioutsw", _wrap_UD_Ioutsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ioutsd", _wrap_UD_Ioutsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ioutsq", _wrap_UD_Ioutsq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipacksswb", _wrap_UD_Ipacksswb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipackssdw", _wrap_UD_Ipackssdw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipackuswb", _wrap_UD_Ipackuswb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddb", _wrap_UD_Ipaddb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddw", _wrap_UD_Ipaddw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddd", _wrap_UD_Ipaddd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddsb", _wrap_UD_Ipaddsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddsw", _wrap_UD_Ipaddsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddusb", _wrap_UD_Ipaddusb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddusw", _wrap_UD_Ipaddusw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipand", _wrap_UD_Ipand, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipandn", _wrap_UD_Ipandn, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipavgb", _wrap_UD_Ipavgb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipavgw", _wrap_UD_Ipavgw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpeqb", _wrap_UD_Ipcmpeqb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpeqw", _wrap_UD_Ipcmpeqw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpeqd", _wrap_UD_Ipcmpeqd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpgtb", _wrap_UD_Ipcmpgtb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpgtw", _wrap_UD_Ipcmpgtw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipcmpgtd", _wrap_UD_Ipcmpgtd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipextrb", _wrap_UD_Ipextrb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipextrd", _wrap_UD_Ipextrd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipextrq", _wrap_UD_Ipextrq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipextrw", _wrap_UD_Ipextrw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipinsrw", _wrap_UD_Ipinsrw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaddwd", _wrap_UD_Ipmaddwd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaxsw", _wrap_UD_Ipmaxsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaxub", _wrap_UD_Ipmaxub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminsw", _wrap_UD_Ipminsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminub", _wrap_UD_Ipminub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmovmskb", _wrap_UD_Ipmovmskb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmulhuw", _wrap_UD_Ipmulhuw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmulhw", _wrap_UD_Ipmulhw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmullw", _wrap_UD_Ipmullw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipop", _wrap_UD_Ipop, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipopa", _wrap_UD_Ipopa, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipopad", _wrap_UD_Ipopad, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipopfw", _wrap_UD_Ipopfw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipopfd", _wrap_UD_Ipopfd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipopfq", _wrap_UD_Ipopfq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipor", _wrap_UD_Ipor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iprefetch", _wrap_UD_Iprefetch, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iprefetchnta", _wrap_UD_Iprefetchnta, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iprefetcht0", _wrap_UD_Iprefetcht0, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iprefetcht1", _wrap_UD_Iprefetcht1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iprefetcht2", _wrap_UD_Iprefetcht2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsadbw", _wrap_UD_Ipsadbw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipshufw", _wrap_UD_Ipshufw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsllw", _wrap_UD_Ipsllw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipslld", _wrap_UD_Ipslld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsllq", _wrap_UD_Ipsllq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsraw", _wrap_UD_Ipsraw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsrad", _wrap_UD_Ipsrad, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsrlw", _wrap_UD_Ipsrlw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsrld", _wrap_UD_Ipsrld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsrlq", _wrap_UD_Ipsrlq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubb", _wrap_UD_Ipsubb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubw", _wrap_UD_Ipsubw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubd", _wrap_UD_Ipsubd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubsb", _wrap_UD_Ipsubsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubsw", _wrap_UD_Ipsubsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubusb", _wrap_UD_Ipsubusb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubusw", _wrap_UD_Ipsubusw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpckhbw", _wrap_UD_Ipunpckhbw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpckhwd", _wrap_UD_Ipunpckhwd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpckhdq", _wrap_UD_Ipunpckhdq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpcklbw", _wrap_UD_Ipunpcklbw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpcklwd", _wrap_UD_Ipunpcklwd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpckldq", _wrap_UD_Ipunpckldq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipi2fw", _wrap_UD_Ipi2fw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipi2fd", _wrap_UD_Ipi2fd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipf2iw", _wrap_UD_Ipf2iw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipf2id", _wrap_UD_Ipf2id, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfnacc", _wrap_UD_Ipfnacc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfpnacc", _wrap_UD_Ipfpnacc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfcmpge", _wrap_UD_Ipfcmpge, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfmin", _wrap_UD_Ipfmin, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfrcp", _wrap_UD_Ipfrcp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfrsqrt", _wrap_UD_Ipfrsqrt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfsub", _wrap_UD_Ipfsub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfadd", _wrap_UD_Ipfadd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfcmpgt", _wrap_UD_Ipfcmpgt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfmax", _wrap_UD_Ipfmax, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfrcpit1", _wrap_UD_Ipfrcpit1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfrsqit1", _wrap_UD_Ipfrsqit1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfsubr", _wrap_UD_Ipfsubr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfacc", _wrap_UD_Ipfacc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfcmpeq", _wrap_UD_Ipfcmpeq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfmul", _wrap_UD_Ipfmul, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipfrcpit2", _wrap_UD_Ipfrcpit2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmulhrw", _wrap_UD_Ipmulhrw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipswapd", _wrap_UD_Ipswapd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipavgusb", _wrap_UD_Ipavgusb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipush", _wrap_UD_Ipush, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipusha", _wrap_UD_Ipusha, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipushad", _wrap_UD_Ipushad, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipushfw", _wrap_UD_Ipushfw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipushfd", _wrap_UD_Ipushfd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipushfq", _wrap_UD_Ipushfq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipxor", _wrap_UD_Ipxor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ircl", _wrap_UD_Ircl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ircr", _wrap_UD_Ircr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irol", _wrap_UD_Irol, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iror", _wrap_UD_Iror, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ircpps", _wrap_UD_Ircpps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ircpss", _wrap_UD_Ircpss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irdmsr", _wrap_UD_Irdmsr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irdpmc", _wrap_UD_Irdpmc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irdtsc", _wrap_UD_Irdtsc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irdtscp", _wrap_UD_Irdtscp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irepne", _wrap_UD_Irepne, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irep", _wrap_UD_Irep, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iret", _wrap_UD_Iret, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iretf", _wrap_UD_Iretf, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irsm", _wrap_UD_Irsm, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irsqrtps", _wrap_UD_Irsqrtps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Irsqrtss", _wrap_UD_Irsqrtss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isahf", _wrap_UD_Isahf, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isalc", _wrap_UD_Isalc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isar", _wrap_UD_Isar, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishl", _wrap_UD_Ishl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishr", _wrap_UD_Ishr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isbb", _wrap_UD_Isbb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iscasb", _wrap_UD_Iscasb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iscasw", _wrap_UD_Iscasw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iscasd", _wrap_UD_Iscasd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iscasq", _wrap_UD_Iscasq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iseto", _wrap_UD_Iseto, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetno", _wrap_UD_Isetno, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetb", _wrap_UD_Isetb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetnb", _wrap_UD_Isetnb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetz", _wrap_UD_Isetz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetnz", _wrap_UD_Isetnz, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetbe", _wrap_UD_Isetbe, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iseta", _wrap_UD_Iseta, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isets", _wrap_UD_Isets, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetns", _wrap_UD_Isetns, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetp", _wrap_UD_Isetp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetnp", _wrap_UD_Isetnp, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetl", _wrap_UD_Isetl, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetge", _wrap_UD_Isetge, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetle", _wrap_UD_Isetle, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isetg", _wrap_UD_Isetg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isfence", _wrap_UD_Isfence, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isgdt", _wrap_UD_Isgdt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishld", _wrap_UD_Ishld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishrd", _wrap_UD_Ishrd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishufpd", _wrap_UD_Ishufpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ishufps", _wrap_UD_Ishufps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isidt", _wrap_UD_Isidt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isldt", _wrap_UD_Isldt, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ismsw", _wrap_UD_Ismsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isqrtps", _wrap_UD_Isqrtps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isqrtpd", _wrap_UD_Isqrtpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isqrtsd", _wrap_UD_Isqrtsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isqrtss", _wrap_UD_Isqrtss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istc", _wrap_UD_Istc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istd", _wrap_UD_Istd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istgi", _wrap_UD_Istgi, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isti", _wrap_UD_Isti, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iskinit", _wrap_UD_Iskinit, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istmxcsr", _wrap_UD_Istmxcsr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istosb", _wrap_UD_Istosb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istosw", _wrap_UD_Istosw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istosd", _wrap_UD_Istosd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istosq", _wrap_UD_Istosq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Istr", _wrap_UD_Istr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isub", _wrap_UD_Isub, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isubpd", _wrap_UD_Isubpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isubps", _wrap_UD_Isubps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isubsd", _wrap_UD_Isubsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isubss", _wrap_UD_Isubss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iswapgs", _wrap_UD_Iswapgs, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isyscall", _wrap_UD_Isyscall, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isysenter", _wrap_UD_Isysenter, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isysexit", _wrap_UD_Isysexit, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Isysret", _wrap_UD_Isysret, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Itest", _wrap_UD_Itest, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iucomisd", _wrap_UD_Iucomisd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iucomiss", _wrap_UD_Iucomiss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iud2", _wrap_UD_Iud2, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iunpckhpd", _wrap_UD_Iunpckhpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iunpckhps", _wrap_UD_Iunpckhps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iunpcklps", _wrap_UD_Iunpcklps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iunpcklpd", _wrap_UD_Iunpcklpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iverr", _wrap_UD_Iverr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iverw", _wrap_UD_Iverw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmcall", _wrap_UD_Ivmcall, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmclear", _wrap_UD_Ivmclear, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmxon", _wrap_UD_Ivmxon, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmptrld", _wrap_UD_Ivmptrld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmptrst", _wrap_UD_Ivmptrst, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmlaunch", _wrap_UD_Ivmlaunch, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmresume", _wrap_UD_Ivmresume, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmxoff", _wrap_UD_Ivmxoff, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmread", _wrap_UD_Ivmread, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmwrite", _wrap_UD_Ivmwrite, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmrun", _wrap_UD_Ivmrun, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmmcall", _wrap_UD_Ivmmcall, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmload", _wrap_UD_Ivmload, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ivmsave", _wrap_UD_Ivmsave, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iwait", _wrap_UD_Iwait, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iwbinvd", _wrap_UD_Iwbinvd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iwrmsr", _wrap_UD_Iwrmsr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixadd", _wrap_UD_Ixadd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixchg", _wrap_UD_Ixchg, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixlatb", _wrap_UD_Ixlatb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixor", _wrap_UD_Ixor, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixorpd", _wrap_UD_Ixorpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixorps", _wrap_UD_Ixorps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixcryptecb", _wrap_UD_Ixcryptecb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixcryptcbc", _wrap_UD_Ixcryptcbc, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixcryptctr", _wrap_UD_Ixcryptctr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixcryptcfb", _wrap_UD_Ixcryptcfb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixcryptofb", _wrap_UD_Ixcryptofb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixsha1", _wrap_UD_Ixsha1, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixsha256", _wrap_UD_Ixsha256, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ixstore", _wrap_UD_Ixstore, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovdqa", _wrap_UD_Imovdqa, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovdq2q", _wrap_UD_Imovdq2q, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovdqu", _wrap_UD_Imovdqu, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovq2dq", _wrap_UD_Imovq2dq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipaddq", _wrap_UD_Ipaddq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsubq", _wrap_UD_Ipsubq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmuludq", _wrap_UD_Ipmuludq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipshufhw", _wrap_UD_Ipshufhw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipshuflw", _wrap_UD_Ipshuflw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipshufd", _wrap_UD_Ipshufd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipslldq", _wrap_UD_Ipslldq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsrldq", _wrap_UD_Ipsrldq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpckhqdq", _wrap_UD_Ipunpckhqdq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipunpcklqdq", _wrap_UD_Ipunpcklqdq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddsubpd", _wrap_UD_Iaddsubpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iaddsubps", _wrap_UD_Iaddsubps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ihaddpd", _wrap_UD_Ihaddpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ihaddps", _wrap_UD_Ihaddps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ihsubpd", _wrap_UD_Ihsubpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ihsubps", _wrap_UD_Ihsubps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovddup", _wrap_UD_Imovddup, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovshdup", _wrap_UD_Imovshdup, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Imovsldup", _wrap_UD_Imovsldup, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipabsb", _wrap_UD_Ipabsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipabsw", _wrap_UD_Ipabsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipabsd", _wrap_UD_Ipabsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsignb", _wrap_UD_Ipsignb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphaddw", _wrap_UD_Iphaddw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphaddd", _wrap_UD_Iphaddd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphaddsw", _wrap_UD_Iphaddsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaddubsw", _wrap_UD_Ipmaddubsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphsubw", _wrap_UD_Iphsubw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphsubd", _wrap_UD_Iphsubd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphsubsw", _wrap_UD_Iphsubsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsignd", _wrap_UD_Ipsignd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipsignw", _wrap_UD_Ipsignw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmulhrsw", _wrap_UD_Ipmulhrsw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipalignr", _wrap_UD_Ipalignr, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipblendvb", _wrap_UD_Ipblendvb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmuldq", _wrap_UD_Ipmuldq, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminsb", _wrap_UD_Ipminsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminsd", _wrap_UD_Ipminsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminuw", _wrap_UD_Ipminuw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipminud", _wrap_UD_Ipminud, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaxsb", _wrap_UD_Ipmaxsb, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaxsd", _wrap_UD_Ipmaxsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmaxud", _wrap_UD_Ipmaxud, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipmulld", _wrap_UD_Ipmulld, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iphminposuw", _wrap_UD_Iphminposuw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iroundps", _wrap_UD_Iroundps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iroundpd", _wrap_UD_Iroundpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iroundss", _wrap_UD_Iroundss, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iroundsd", _wrap_UD_Iroundsd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iblendpd", _wrap_UD_Iblendpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Ipblendw", _wrap_UD_Ipblendw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iblendps", _wrap_UD_Iblendps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iblendvpd", _wrap_UD_Iblendvpd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iblendvps", _wrap_UD_Iblendvps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idpps", _wrap_UD_Idpps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Idppd", _wrap_UD_Idppd, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Impsadbw", _wrap_UD_Impsadbw, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "UD_Iextractps", _wrap_UD_Iextractps, JS_veto_set_variable);
    SWIGV8_AddStaticVariable(global_obj, "ud_mnemonics_str", _wrap_ud_mnemonics_str_get, JS_veto_set_variable);
    
    
    /* setup inheritances */
    
    
    /* class instances */
    v8::Handle<v8::FunctionTemplate> _imaxdiv_t_class_0 = SWIGV8_CreateClassTemplate("imaxdiv_t");
    _imaxdiv_t_class_0->SetCallHandler(_wrap_new_imaxdiv_t);
    _imaxdiv_t_class_0->Inherit(_imaxdiv_t_class);
    _imaxdiv_t_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _imaxdiv_t_obj = _imaxdiv_t_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ud_operand_class_0 = SWIGV8_CreateClassTemplate("ud_operand");
    _ud_operand_class_0->SetCallHandler(_wrap_new_ud_operand);
    _ud_operand_class_0->Inherit(_ud_operand_class);
    _ud_operand_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ud_operand_obj = _ud_operand_class_0->GetFunction();
    v8::Handle<v8::FunctionTemplate> _ud_class_0 = SWIGV8_CreateClassTemplate("ud");
    _ud_class_0->SetCallHandler(_wrap_new_ud);
    _ud_class_0->Inherit(_ud_class);
    _ud_class_0->SetHiddenPrototype(true);
    v8::Handle<v8::Object> _ud_obj = _ud_class_0->GetFunction();
    
    
    /* add static class functions and variables */
    SWIGV8_AddStaticFunction(global_obj, "imaxabs", _wrap_imaxabs);
    SWIGV8_AddStaticFunction(global_obj, "imaxdiv", _wrap_imaxdiv);
    SWIGV8_AddStaticFunction(global_obj, "strtoimax", _wrap_strtoimax);
    SWIGV8_AddStaticFunction(global_obj, "strtoumax", _wrap_strtoumax);
    SWIGV8_AddStaticFunction(global_obj, "ud_init", _wrap_ud_init);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_mode", _wrap_ud_set_mode);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_pc", _wrap_ud_set_pc);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_input_hook", _wrap_ud_set_input_hook);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_input_buffer", _wrap_ud_set_input_buffer);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_input_file", _wrap_ud_set_input_file);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_vendor", _wrap_ud_set_vendor);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_syntax", _wrap_ud_set_syntax);
    SWIGV8_AddStaticFunction(global_obj, "ud_input_skip", _wrap_ud_input_skip);
    SWIGV8_AddStaticFunction(global_obj, "ud_input_end", _wrap_ud_input_end);
    SWIGV8_AddStaticFunction(global_obj, "ud_decode", _wrap_ud_decode);
    SWIGV8_AddStaticFunction(global_obj, "ud_disassemble", _wrap_ud_disassemble);
    SWIGV8_AddStaticFunction(global_obj, "ud_translate_intel", _wrap_ud_translate_intel);
    SWIGV8_AddStaticFunction(global_obj, "ud_translate_att", _wrap_ud_translate_att);
    SWIGV8_AddStaticFunction(global_obj, "ud_insn_asm", _wrap_ud_insn_asm);
    SWIGV8_AddStaticFunction(global_obj, "ud_insn_ptr", _wrap_ud_insn_ptr);
    SWIGV8_AddStaticFunction(global_obj, "ud_insn_off", _wrap_ud_insn_off);
    SWIGV8_AddStaticFunction(global_obj, "ud_insn_hex", _wrap_ud_insn_hex);
    SWIGV8_AddStaticFunction(global_obj, "ud_insn_len", _wrap_ud_insn_len);
    SWIGV8_AddStaticFunction(global_obj, "ud_lookup_mnemonic", _wrap_ud_lookup_mnemonic);
    SWIGV8_AddStaticFunction(global_obj, "ud_set_user_opaque_data", _wrap_ud_set_user_opaque_data);
    SWIGV8_AddStaticFunction(global_obj, "ud_get_user_opaque_data", _wrap_ud_get_user_opaque_data);
    
    
    /* register classes */
    global_obj->Set(v8::String::NewSymbol("imaxdiv_t"), _imaxdiv_t_obj);
    global_obj->Set(v8::String::NewSymbol("ud_operand"), _ud_operand_obj);
    global_obj->Set(v8::String::NewSymbol("ud"), _ud_obj);
    
    
    /* create and register namespace objects */
    
    
  }
  
} // extern "C"


extern "C" {

    void init(v8::Handle<v8::Object> target) {
      UDis86_initialize(target);
    }

    NODE_MODULE(UDis86, UDis86_initialize)
}

